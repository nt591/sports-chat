var _ = require('underscore');
var EventEmitter = require('events').EventEmitter;
var net = require('net');

var chatti = {
  createServer: function(config) {
    var emitter = new EventEmitter();

    var onSocketConnection = function(socket) {
      emitter.emit("client connected", socket)
    };

    return {
      on: function(event, fn) {
        emitter.on(event, fn);
      },
      start: function() {
        if(config.httpServer != null) {
          var io = require('socket.io').listen(config.httpServer);
          io.sockets.on('connection', onSocketConnection);
        } 
        if(config.tcpHost != null && config.tcpPort != null) {
          var server = net.Server();
          server.on('connection', onSocketConnection);
          server.listen(config.tcpPort, config.tcpHost);
        }
      },
    };
  },
  transformSocket: function(socket) {
    var client = {

    };

    if(socket.id == null) {
      var emitter = new EventEmitter();

      socket.on('data', function(data) {
        var parsed = JSON.parse(data);
        emitter.emit(parsed.event || 'data', parsed.data);
      }); 

      socket.on('error', function(error) {
        if(error.code === 'ECONNRESET') {
          emitter.emit('disconnect');
        }
      });

      client = {
        on: function(event,fn) {
          emitter.on(event, fn);
        },
        emit: function(event, data) {
          socket.write(JSON.stringify({
            event: event,
            data: data
          }));
        }
      };
    }
    else {
      client = {
        on: function(event, fn) {
          socket.on(event, fn);
        },
        emit: function(event, data) {
          socket.emit(event, data);
        }
      };
    }

    return client;
  },
  createManager: function(socket) {
    var emitter = new EventEmitter();

    var clients = [];

    var getFreeID = function() {
      var id = 1;

      while(_.where(clients, {id: id}).length > 0) {
        id++;
      }

      return id;
    };

    var mgr = {
      on: function(event, fn) {
        emitter.on(event, fn)
      },
      add: function(client) {
        client.id = getFreeID();
        client.manager = mgr;

        client.broadcast = function(event, data) {
          var others = _.filter(clients, function(current) {
            return current.id != client.id;
          });

          _.each(others, function(current) {
            current.emit(event, data);
          })
        };

        client.on('message', function(data) {
          emitter.emit('client message', {
            client: client,
            data: data
          })
        });

        client.on('disconnect', function() {
          emitter.emit('client disconnect', client);
        })

        clients.push(client);
        return client;
      }
    }
    return mgr;
  }
};

module.exports = chatti;